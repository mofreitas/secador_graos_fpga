// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2018 01:38:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto3sd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto3sd_vlg_sample_tst(
	chave,
	clkFPGA,
	MOSI,
	SCK,
	SS,
	sampler_tx
);
input  chave;
input  clkFPGA;
input  MOSI;
input  SCK;
input  SS;
output sampler_tx;

reg sample;
time current_time;
always @(chave or clkFPGA or MOSI or SCK or SS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto3sd_vlg_check_tst (
	chave_out,
	LED_ATIV,
	MISO,
	PWM1,
	PWM2,
	sampler_rx
);
input  chave_out;
input  LED_ATIV;
input  MISO;
input  PWM1;
input  PWM2;
input sampler_rx;

reg  chave_out_expected;
reg  LED_ATIV_expected;
reg  MISO_expected;
reg  PWM1_expected;
reg  PWM2_expected;

reg  chave_out_prev;
reg  LED_ATIV_prev;
reg  MISO_prev;
reg  PWM1_prev;
reg  PWM2_prev;

reg  chave_out_expected_prev;
reg  LED_ATIV_expected_prev;
reg  MISO_expected_prev;
reg  PWM1_expected_prev;
reg  PWM2_expected_prev;

reg  last_chave_out_exp;
reg  last_LED_ATIV_exp;
reg  last_MISO_exp;
reg  last_PWM1_exp;
reg  last_PWM2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	chave_out_prev = chave_out;
	LED_ATIV_prev = LED_ATIV;
	MISO_prev = MISO;
	PWM1_prev = PWM1;
	PWM2_prev = PWM2;
end

// update expected /o prevs

always @(trigger)
begin
	chave_out_expected_prev = chave_out_expected;
	LED_ATIV_expected_prev = LED_ATIV_expected;
	MISO_expected_prev = MISO_expected;
	PWM1_expected_prev = PWM1_expected;
	PWM2_expected_prev = PWM2_expected;
end



// expected MISO
initial
begin
	MISO_expected = 1'b0;
end 

// expected LED_ATIV
initial
begin
	LED_ATIV_expected = 1'bX;
	LED_ATIV_expected = #1999000 1'b0;
end 

// expected PWM1
initial
begin
	PWM1_expected = 1'bX;
	PWM1_expected = #1999000 1'b0;
end 

// expected PWM2
initial
begin
	PWM2_expected = 1'bX;
	PWM2_expected = #1999000 1'b0;
end 

// expected chave_out
initial
begin
	chave_out_expected = 1'bX;
	chave_out_expected = #1999000 1'b0;
end 
// generate trigger
always @(chave_out_expected or chave_out or LED_ATIV_expected or LED_ATIV or MISO_expected or MISO or PWM1_expected or PWM1 or PWM2_expected or PWM2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected chave_out = %b | expected LED_ATIV = %b | expected MISO = %b | expected PWM1 = %b | expected PWM2 = %b | ",chave_out_expected_prev,LED_ATIV_expected_prev,MISO_expected_prev,PWM1_expected_prev,PWM2_expected_prev);
	$display("| real chave_out = %b | real LED_ATIV = %b | real MISO = %b | real PWM1 = %b | real PWM2 = %b | ",chave_out_prev,LED_ATIV_prev,MISO_prev,PWM1_prev,PWM2_prev);
`endif
	if (
		( chave_out_expected_prev !== 1'bx ) && ( chave_out_prev !== chave_out_expected_prev )
		&& ((chave_out_expected_prev !== last_chave_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port chave_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", chave_out_expected_prev);
		$display ("     Real value = %b", chave_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_chave_out_exp = chave_out_expected_prev;
	end
	if (
		( LED_ATIV_expected_prev !== 1'bx ) && ( LED_ATIV_prev !== LED_ATIV_expected_prev )
		&& ((LED_ATIV_expected_prev !== last_LED_ATIV_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_ATIV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_ATIV_expected_prev);
		$display ("     Real value = %b", LED_ATIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_ATIV_exp = LED_ATIV_expected_prev;
	end
	if (
		( MISO_expected_prev !== 1'bx ) && ( MISO_prev !== MISO_expected_prev )
		&& ((MISO_expected_prev !== last_MISO_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MISO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MISO_expected_prev);
		$display ("     Real value = %b", MISO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MISO_exp = MISO_expected_prev;
	end
	if (
		( PWM1_expected_prev !== 1'bx ) && ( PWM1_prev !== PWM1_expected_prev )
		&& ((PWM1_expected_prev !== last_PWM1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PWM1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PWM1_expected_prev);
		$display ("     Real value = %b", PWM1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PWM1_exp = PWM1_expected_prev;
	end
	if (
		( PWM2_expected_prev !== 1'bx ) && ( PWM2_prev !== PWM2_expected_prev )
		&& ((PWM2_expected_prev !== last_PWM2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PWM2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PWM2_expected_prev);
		$display ("     Real value = %b", PWM2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PWM2_exp = PWM2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module projeto3sd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg chave;
reg clkFPGA;
reg MOSI;
reg SCK;
reg SS;
// wires                                               
wire chave_out;
wire LED_ATIV;
wire MISO;
wire PWM1;
wire PWM2;

wire sampler;                             

// assign statements (if any)                          
projeto3sd i1 (
// port map - connection between master ports and signals/registers   
	.chave(chave),
	.chave_out(chave_out),
	.clkFPGA(clkFPGA),
	.LED_ATIV(LED_ATIV),
	.MISO(MISO),
	.MOSI(MOSI),
	.PWM1(PWM1),
	.PWM2(PWM2),
	.SCK(SCK),
	.SS(SS)
);

// MOSI
initial
begin
	MOSI = 1'b0;
	MOSI = #170000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #60000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #100000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #60000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #20000 1'b1;
	MOSI = #110000 1'b0;
	MOSI = #2600000 1'b1;
	MOSI = #640000 1'b0;
	MOSI = #1280000 1'b1;
	MOSI = #640000 1'b0;
	MOSI = #5440000 1'b1;
	MOSI = #640000 1'b0;
	MOSI = #6400000 1'b1;
	MOSI = #640000 1'b0;
	MOSI = #5440000 1'b1;
	MOSI = #640000 1'b0;
	MOSI = #2240000 1'b1;
	MOSI = #640000 1'b0;
	MOSI = #3200000 1'b1;
	MOSI = #7680000 1'b0;
	MOSI = #9600000 1'b1;
	MOSI = #320000 1'b0;
	MOSI = #3520000 1'b1;
	MOSI = #960000 1'b0;
	MOSI = #4160000 1'b1;
	MOSI = #640000 1'b0;
	MOSI = #5120000 1'b1;
	MOSI = #1600000 1'b0;
	MOSI = #6400000 1'b1;
	MOSI = #1600000 1'b0;
	MOSI = #8640000 1'b1;
	MOSI = #960000 1'b0;
	MOSI = #1600000 1'b1;
	MOSI = #960000 1'b0;
end 

// SCK
initial
begin
	SCK = 1'b1;
	SCK = #1000000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
	SCK = #2500000 1'b0;
	SCK = #500000 1'b1;
	# 500000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #500000 1'b1;
		# 500000;
	end
	SCK = 1'b0;
	SCK = #500000 1'b1;
end 

// SS
initial
begin
	SS = 1'b1;
	SS = #480000 1'b0;
end 

// clkFPGA
always
begin
	clkFPGA = 1'b0;
	clkFPGA = #10000 1'b1;
	#10000;
end 

// chave
initial
begin
	chave = 1'b1;
end 

projeto3sd_vlg_sample_tst tb_sample (
	.chave(chave),
	.clkFPGA(clkFPGA),
	.MOSI(MOSI),
	.SCK(SCK),
	.SS(SS),
	.sampler_tx(sampler)
);

projeto3sd_vlg_check_tst tb_out(
	.chave_out(chave_out),
	.LED_ATIV(LED_ATIV),
	.MISO(MISO),
	.PWM1(PWM1),
	.PWM2(PWM2),
	.sampler_rx(sampler)
);
endmodule

