// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2018 00:53:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto3sd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto3sd_vlg_sample_tst(
	chave,
	clkFPGA,
	MOSI,
	SCK,
	SS,
	sampler_tx
);
input  chave;
input  clkFPGA;
input  MOSI;
input  SCK;
input  SS;
output sampler_tx;

reg sample;
time current_time;
always @(chave or clkFPGA or MOSI or SCK or SS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto3sd_vlg_check_tst (
	chave_out,
	en_wr,
	LED_ATIV,
	MISO,
	PWM1,
	PWM2,
	selData,
	temp_out,
	umid_out,
	sampler_rx
);
input  chave_out;
input  en_wr;
input  LED_ATIV;
input  MISO;
input  PWM1;
input  PWM2;
input  selData;
input [7:0] temp_out;
input [7:0] umid_out;
input sampler_rx;

reg  chave_out_expected;
reg  en_wr_expected;
reg  LED_ATIV_expected;
reg  MISO_expected;
reg  PWM1_expected;
reg  PWM2_expected;
reg  selData_expected;
reg [7:0] temp_out_expected;
reg [7:0] umid_out_expected;

reg  chave_out_prev;
reg  en_wr_prev;
reg  LED_ATIV_prev;
reg  MISO_prev;
reg  PWM1_prev;
reg  PWM2_prev;
reg  selData_prev;
reg [7:0] temp_out_prev;
reg [7:0] umid_out_prev;

reg  chave_out_expected_prev;
reg  en_wr_expected_prev;
reg  LED_ATIV_expected_prev;
reg  MISO_expected_prev;
reg  PWM1_expected_prev;
reg  PWM2_expected_prev;
reg  selData_expected_prev;
reg [7:0] temp_out_expected_prev;
reg [7:0] umid_out_expected_prev;

reg  last_chave_out_exp;
reg  last_en_wr_exp;
reg  last_LED_ATIV_exp;
reg  last_MISO_exp;
reg  last_PWM1_exp;
reg  last_PWM2_exp;
reg  last_selData_exp;
reg [7:0] last_temp_out_exp;
reg [7:0] last_umid_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	chave_out_prev = chave_out;
	en_wr_prev = en_wr;
	LED_ATIV_prev = LED_ATIV;
	MISO_prev = MISO;
	PWM1_prev = PWM1;
	PWM2_prev = PWM2;
	selData_prev = selData;
	temp_out_prev = temp_out;
	umid_out_prev = umid_out;
end

// update expected /o prevs

always @(trigger)
begin
	chave_out_expected_prev = chave_out_expected;
	en_wr_expected_prev = en_wr_expected;
	LED_ATIV_expected_prev = LED_ATIV_expected;
	MISO_expected_prev = MISO_expected;
	PWM1_expected_prev = PWM1_expected;
	PWM2_expected_prev = PWM2_expected;
	selData_expected_prev = selData_expected;
	temp_out_expected_prev = temp_out_expected;
	umid_out_expected_prev = umid_out_expected;
end



// expected MISO
initial
begin
	MISO_expected = 1'b0;
end 

// expected LED_ATIV
initial
begin
	LED_ATIV_expected = 1'bX;
end 

// expected PWM1
initial
begin
	PWM1_expected = 1'bX;
end 

// expected PWM2
initial
begin
	PWM2_expected = 1'bX;
end 
// expected umid_out[ 7 ]
initial
begin
	umid_out_expected[7] = 1'bX;
end 
// expected umid_out[ 6 ]
initial
begin
	umid_out_expected[6] = 1'bX;
end 
// expected umid_out[ 5 ]
initial
begin
	umid_out_expected[5] = 1'bX;
end 
// expected umid_out[ 4 ]
initial
begin
	umid_out_expected[4] = 1'bX;
end 
// expected umid_out[ 3 ]
initial
begin
	umid_out_expected[3] = 1'bX;
end 
// expected umid_out[ 2 ]
initial
begin
	umid_out_expected[2] = 1'bX;
end 
// expected umid_out[ 1 ]
initial
begin
	umid_out_expected[1] = 1'bX;
end 
// expected umid_out[ 0 ]
initial
begin
	umid_out_expected[0] = 1'bX;
end 
// expected temp_out[ 7 ]
initial
begin
	temp_out_expected[7] = 1'bX;
end 
// expected temp_out[ 6 ]
initial
begin
	temp_out_expected[6] = 1'bX;
end 
// expected temp_out[ 5 ]
initial
begin
	temp_out_expected[5] = 1'bX;
end 
// expected temp_out[ 4 ]
initial
begin
	temp_out_expected[4] = 1'bX;
end 
// expected temp_out[ 3 ]
initial
begin
	temp_out_expected[3] = 1'bX;
end 
// expected temp_out[ 2 ]
initial
begin
	temp_out_expected[2] = 1'bX;
end 
// expected temp_out[ 1 ]
initial
begin
	temp_out_expected[1] = 1'bX;
end 
// expected temp_out[ 0 ]
initial
begin
	temp_out_expected[0] = 1'bX;
end 

// expected selData
initial
begin
	selData_expected = 1'bX;
end 

// expected en_wr
initial
begin
	en_wr_expected = 1'bX;
end 

// expected chave_out
initial
begin
	chave_out_expected = 1'bX;
end 
// generate trigger
always @(chave_out_expected or chave_out or en_wr_expected or en_wr or LED_ATIV_expected or LED_ATIV or MISO_expected or MISO or PWM1_expected or PWM1 or PWM2_expected or PWM2 or selData_expected or selData or temp_out_expected or temp_out or umid_out_expected or umid_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected chave_out = %b | expected en_wr = %b | expected LED_ATIV = %b | expected MISO = %b | expected PWM1 = %b | expected PWM2 = %b | expected selData = %b | expected temp_out = %b | expected umid_out = %b | ",chave_out_expected_prev,en_wr_expected_prev,LED_ATIV_expected_prev,MISO_expected_prev,PWM1_expected_prev,PWM2_expected_prev,selData_expected_prev,temp_out_expected_prev,umid_out_expected_prev);
	$display("| real chave_out = %b | real en_wr = %b | real LED_ATIV = %b | real MISO = %b | real PWM1 = %b | real PWM2 = %b | real selData = %b | real temp_out = %b | real umid_out = %b | ",chave_out_prev,en_wr_prev,LED_ATIV_prev,MISO_prev,PWM1_prev,PWM2_prev,selData_prev,temp_out_prev,umid_out_prev);
`endif
	if (
		( chave_out_expected_prev !== 1'bx ) && ( chave_out_prev !== chave_out_expected_prev )
		&& ((chave_out_expected_prev !== last_chave_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port chave_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", chave_out_expected_prev);
		$display ("     Real value = %b", chave_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_chave_out_exp = chave_out_expected_prev;
	end
	if (
		( en_wr_expected_prev !== 1'bx ) && ( en_wr_prev !== en_wr_expected_prev )
		&& ((en_wr_expected_prev !== last_en_wr_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_wr_expected_prev);
		$display ("     Real value = %b", en_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_wr_exp = en_wr_expected_prev;
	end
	if (
		( LED_ATIV_expected_prev !== 1'bx ) && ( LED_ATIV_prev !== LED_ATIV_expected_prev )
		&& ((LED_ATIV_expected_prev !== last_LED_ATIV_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_ATIV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_ATIV_expected_prev);
		$display ("     Real value = %b", LED_ATIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED_ATIV_exp = LED_ATIV_expected_prev;
	end
	if (
		( MISO_expected_prev !== 1'bx ) && ( MISO_prev !== MISO_expected_prev )
		&& ((MISO_expected_prev !== last_MISO_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MISO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MISO_expected_prev);
		$display ("     Real value = %b", MISO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MISO_exp = MISO_expected_prev;
	end
	if (
		( PWM1_expected_prev !== 1'bx ) && ( PWM1_prev !== PWM1_expected_prev )
		&& ((PWM1_expected_prev !== last_PWM1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PWM1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PWM1_expected_prev);
		$display ("     Real value = %b", PWM1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PWM1_exp = PWM1_expected_prev;
	end
	if (
		( PWM2_expected_prev !== 1'bx ) && ( PWM2_prev !== PWM2_expected_prev )
		&& ((PWM2_expected_prev !== last_PWM2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PWM2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PWM2_expected_prev);
		$display ("     Real value = %b", PWM2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PWM2_exp = PWM2_expected_prev;
	end
	if (
		( selData_expected_prev !== 1'bx ) && ( selData_prev !== selData_expected_prev )
		&& ((selData_expected_prev !== last_selData_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selData :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selData_expected_prev);
		$display ("     Real value = %b", selData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_selData_exp = selData_expected_prev;
	end
	if (
		( temp_out_expected_prev[0] !== 1'bx ) && ( temp_out_prev[0] !== temp_out_expected_prev[0] )
		&& ((temp_out_expected_prev[0] !== last_temp_out_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[0] = temp_out_expected_prev[0];
	end
	if (
		( temp_out_expected_prev[1] !== 1'bx ) && ( temp_out_prev[1] !== temp_out_expected_prev[1] )
		&& ((temp_out_expected_prev[1] !== last_temp_out_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[1] = temp_out_expected_prev[1];
	end
	if (
		( temp_out_expected_prev[2] !== 1'bx ) && ( temp_out_prev[2] !== temp_out_expected_prev[2] )
		&& ((temp_out_expected_prev[2] !== last_temp_out_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[2] = temp_out_expected_prev[2];
	end
	if (
		( temp_out_expected_prev[3] !== 1'bx ) && ( temp_out_prev[3] !== temp_out_expected_prev[3] )
		&& ((temp_out_expected_prev[3] !== last_temp_out_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[3] = temp_out_expected_prev[3];
	end
	if (
		( temp_out_expected_prev[4] !== 1'bx ) && ( temp_out_prev[4] !== temp_out_expected_prev[4] )
		&& ((temp_out_expected_prev[4] !== last_temp_out_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[4] = temp_out_expected_prev[4];
	end
	if (
		( temp_out_expected_prev[5] !== 1'bx ) && ( temp_out_prev[5] !== temp_out_expected_prev[5] )
		&& ((temp_out_expected_prev[5] !== last_temp_out_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[5] = temp_out_expected_prev[5];
	end
	if (
		( temp_out_expected_prev[6] !== 1'bx ) && ( temp_out_prev[6] !== temp_out_expected_prev[6] )
		&& ((temp_out_expected_prev[6] !== last_temp_out_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[6] = temp_out_expected_prev[6];
	end
	if (
		( temp_out_expected_prev[7] !== 1'bx ) && ( temp_out_prev[7] !== temp_out_expected_prev[7] )
		&& ((temp_out_expected_prev[7] !== last_temp_out_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_out_expected_prev);
		$display ("     Real value = %b", temp_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_temp_out_exp[7] = temp_out_expected_prev[7];
	end
	if (
		( umid_out_expected_prev[0] !== 1'bx ) && ( umid_out_prev[0] !== umid_out_expected_prev[0] )
		&& ((umid_out_expected_prev[0] !== last_umid_out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[0] = umid_out_expected_prev[0];
	end
	if (
		( umid_out_expected_prev[1] !== 1'bx ) && ( umid_out_prev[1] !== umid_out_expected_prev[1] )
		&& ((umid_out_expected_prev[1] !== last_umid_out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[1] = umid_out_expected_prev[1];
	end
	if (
		( umid_out_expected_prev[2] !== 1'bx ) && ( umid_out_prev[2] !== umid_out_expected_prev[2] )
		&& ((umid_out_expected_prev[2] !== last_umid_out_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[2] = umid_out_expected_prev[2];
	end
	if (
		( umid_out_expected_prev[3] !== 1'bx ) && ( umid_out_prev[3] !== umid_out_expected_prev[3] )
		&& ((umid_out_expected_prev[3] !== last_umid_out_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[3] = umid_out_expected_prev[3];
	end
	if (
		( umid_out_expected_prev[4] !== 1'bx ) && ( umid_out_prev[4] !== umid_out_expected_prev[4] )
		&& ((umid_out_expected_prev[4] !== last_umid_out_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[4] = umid_out_expected_prev[4];
	end
	if (
		( umid_out_expected_prev[5] !== 1'bx ) && ( umid_out_prev[5] !== umid_out_expected_prev[5] )
		&& ((umid_out_expected_prev[5] !== last_umid_out_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[5] = umid_out_expected_prev[5];
	end
	if (
		( umid_out_expected_prev[6] !== 1'bx ) && ( umid_out_prev[6] !== umid_out_expected_prev[6] )
		&& ((umid_out_expected_prev[6] !== last_umid_out_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[6] = umid_out_expected_prev[6];
	end
	if (
		( umid_out_expected_prev[7] !== 1'bx ) && ( umid_out_prev[7] !== umid_out_expected_prev[7] )
		&& ((umid_out_expected_prev[7] !== last_umid_out_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port umid_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", umid_out_expected_prev);
		$display ("     Real value = %b", umid_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_umid_out_exp[7] = umid_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projeto3sd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg chave;
reg clkFPGA;
reg MOSI;
reg SCK;
reg SS;
// wires                                               
wire chave_out;
wire en_wr;
wire LED_ATIV;
wire MISO;
wire PWM1;
wire PWM2;
wire selData;
wire [7:0] temp_out;
wire [7:0] umid_out;

wire sampler;                             

// assign statements (if any)                          
projeto3sd i1 (
// port map - connection between master ports and signals/registers   
	.chave(chave),
	.chave_out(chave_out),
	.clkFPGA(clkFPGA),
	.en_wr(en_wr),
	.LED_ATIV(LED_ATIV),
	.MISO(MISO),
	.MOSI(MOSI),
	.PWM1(PWM1),
	.PWM2(PWM2),
	.SCK(SCK),
	.selData(selData),
	.SS(SS),
	.temp_out(temp_out),
	.umid_out(umid_out)
);

// MOSI
initial
begin
	MOSI = 1'b0;
	MOSI = #170000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #60000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #100000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #60000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #20000 1'b1;
	MOSI = #110000 1'b0;
end 

// SCK
initial
begin
	SCK = 1'b0;
	SCK = #20000 1'b1;
	SCK = #60000 1'b0;
	SCK = #20000 1'b1;
	# 20000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #20000 1'b1;
		# 20000;
	end
	SCK = 1'b0;
	SCK = #20000 1'b1;
	SCK = #100000 1'b0;
	SCK = #20000 1'b1;
	# 20000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #20000 1'b1;
		# 20000;
	end
	SCK = 1'b0;
	SCK = #20000 1'b1;
	SCK = #100000 1'b0;
	SCK = #20000 1'b1;
	# 20000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #20000 1'b1;
		# 20000;
	end
	SCK = 1'b0;
	SCK = #20000 1'b1;
	SCK = #100000 1'b0;
	SCK = #20000 1'b1;
	# 20000;
	repeat(6)
	begin
		SCK = 1'b0;
		SCK = #20000 1'b1;
		# 20000;
	end
	SCK = 1'b0;
	SCK = #20000 1'b1;
	SCK = #100000 1'b0;
	SCK = #20000 1'b1;
	# 20000;
	repeat(7)
	begin
		SCK = 1'b0;
		SCK = #20000 1'b1;
		# 20000;
	end
end 

// SS
initial
begin
	SS = 1'b1;
	SS = #60000 1'b0;
end 

// clkFPGA
always
begin
	clkFPGA = 1'b0;
	clkFPGA = #5000 1'b1;
	#5000;
end 

// chave
initial
begin
	chave = 1'b1;
end 

projeto3sd_vlg_sample_tst tb_sample (
	.chave(chave),
	.clkFPGA(clkFPGA),
	.MOSI(MOSI),
	.SCK(SCK),
	.SS(SS),
	.sampler_tx(sampler)
);

projeto3sd_vlg_check_tst tb_out(
	.chave_out(chave_out),
	.en_wr(en_wr),
	.LED_ATIV(LED_ATIV),
	.MISO(MISO),
	.PWM1(PWM1),
	.PWM2(PWM2),
	.selData(selData),
	.temp_out(temp_out),
	.umid_out(umid_out),
	.sampler_rx(sampler)
);
endmodule

