// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2018 10:17:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto3sd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto3sd_vlg_sample_tst(
	clkFPGA,
	enviar,
	ESCREVER,
	LER,
	MOSI,
	SCK,
	SS,
	sampler_tx
);
input  clkFPGA;
input [7:0] enviar;
input  ESCREVER;
input  LER;
input  MOSI;
input  SCK;
input  SS;
output sampler_tx;

reg sample;
time current_time;
always @(clkFPGA or enviar or ESCREVER or LER or MOSI or SCK or SS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto3sd_vlg_check_tst (
	MISO,
	ovf,
	recebido,
	sai,
	sampler_rx
);
input  MISO;
input  ovf;
input [7:0] recebido;
input [3:0] sai;
input sampler_rx;

reg  MISO_expected;
reg  ovf_expected;
reg [7:0] recebido_expected;
reg [3:0] sai_expected;

reg  MISO_prev;
reg  ovf_prev;
reg [7:0] recebido_prev;
reg [3:0] sai_prev;

reg  MISO_expected_prev;
reg  ovf_expected_prev;
reg [7:0] recebido_expected_prev;
reg [3:0] sai_expected_prev;

reg  last_MISO_exp;
reg  last_ovf_exp;
reg [7:0] last_recebido_exp;
reg [3:0] last_sai_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	MISO_prev = MISO;
	ovf_prev = ovf;
	recebido_prev = recebido;
	sai_prev = sai;
end

// update expected /o prevs

always @(trigger)
begin
	MISO_expected_prev = MISO_expected;
	ovf_expected_prev = ovf_expected;
	recebido_expected_prev = recebido_expected;
	sai_expected_prev = sai_expected;
end



// expected MISO
initial
begin
	MISO_expected = 1'bX;
	MISO_expected = #999000 1'b0;
end 

// expected ovf
initial
begin
	ovf_expected = 1'bX;
	ovf_expected = #999000 1'b0;
end 
// expected recebido[ 7 ]
initial
begin
	recebido_expected[7] = 1'bX;
	recebido_expected[7] = #999000 1'b0;
end 
// expected recebido[ 6 ]
initial
begin
	recebido_expected[6] = 1'bX;
	recebido_expected[6] = #999000 1'b0;
end 
// expected recebido[ 5 ]
initial
begin
	recebido_expected[5] = 1'bX;
	recebido_expected[5] = #999000 1'b0;
end 
// expected recebido[ 4 ]
initial
begin
	recebido_expected[4] = 1'bX;
	recebido_expected[4] = #999000 1'b0;
end 
// expected recebido[ 3 ]
initial
begin
	recebido_expected[3] = 1'bX;
	recebido_expected[3] = #999000 1'b0;
end 
// expected recebido[ 2 ]
initial
begin
	recebido_expected[2] = 1'bX;
	recebido_expected[2] = #999000 1'b0;
end 
// expected recebido[ 1 ]
initial
begin
	recebido_expected[1] = 1'bX;
	recebido_expected[1] = #999000 1'b0;
end 
// expected recebido[ 0 ]
initial
begin
	recebido_expected[0] = 1'bX;
	recebido_expected[0] = #999000 1'b0;
end 
// expected sai[ 3 ]
initial
begin
	sai_expected[3] = 1'bX;
	sai_expected[3] = #999000 1'b0;
end 
// expected sai[ 2 ]
initial
begin
	sai_expected[2] = 1'bX;
	sai_expected[2] = #999000 1'b0;
end 
// expected sai[ 1 ]
initial
begin
	sai_expected[1] = 1'bX;
	sai_expected[1] = #999000 1'b0;
end 
// expected sai[ 0 ]
initial
begin
	sai_expected[0] = 1'bX;
	sai_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(MISO_expected or MISO or ovf_expected or ovf or recebido_expected or recebido or sai_expected or sai)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MISO = %b | expected ovf = %b | expected recebido = %b | expected sai = %b | ",MISO_expected_prev,ovf_expected_prev,recebido_expected_prev,sai_expected_prev);
	$display("| real MISO = %b | real ovf = %b | real recebido = %b | real sai = %b | ",MISO_prev,ovf_prev,recebido_prev,sai_prev);
`endif
	if (
		( MISO_expected_prev !== 1'bx ) && ( MISO_prev !== MISO_expected_prev )
		&& ((MISO_expected_prev !== last_MISO_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MISO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MISO_expected_prev);
		$display ("     Real value = %b", MISO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MISO_exp = MISO_expected_prev;
	end
	if (
		( ovf_expected_prev !== 1'bx ) && ( ovf_prev !== ovf_expected_prev )
		&& ((ovf_expected_prev !== last_ovf_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ovf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ovf_expected_prev);
		$display ("     Real value = %b", ovf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ovf_exp = ovf_expected_prev;
	end
	if (
		( recebido_expected_prev[0] !== 1'bx ) && ( recebido_prev[0] !== recebido_expected_prev[0] )
		&& ((recebido_expected_prev[0] !== last_recebido_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[0] = recebido_expected_prev[0];
	end
	if (
		( recebido_expected_prev[1] !== 1'bx ) && ( recebido_prev[1] !== recebido_expected_prev[1] )
		&& ((recebido_expected_prev[1] !== last_recebido_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[1] = recebido_expected_prev[1];
	end
	if (
		( recebido_expected_prev[2] !== 1'bx ) && ( recebido_prev[2] !== recebido_expected_prev[2] )
		&& ((recebido_expected_prev[2] !== last_recebido_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[2] = recebido_expected_prev[2];
	end
	if (
		( recebido_expected_prev[3] !== 1'bx ) && ( recebido_prev[3] !== recebido_expected_prev[3] )
		&& ((recebido_expected_prev[3] !== last_recebido_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[3] = recebido_expected_prev[3];
	end
	if (
		( recebido_expected_prev[4] !== 1'bx ) && ( recebido_prev[4] !== recebido_expected_prev[4] )
		&& ((recebido_expected_prev[4] !== last_recebido_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[4] = recebido_expected_prev[4];
	end
	if (
		( recebido_expected_prev[5] !== 1'bx ) && ( recebido_prev[5] !== recebido_expected_prev[5] )
		&& ((recebido_expected_prev[5] !== last_recebido_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[5] = recebido_expected_prev[5];
	end
	if (
		( recebido_expected_prev[6] !== 1'bx ) && ( recebido_prev[6] !== recebido_expected_prev[6] )
		&& ((recebido_expected_prev[6] !== last_recebido_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[6] = recebido_expected_prev[6];
	end
	if (
		( recebido_expected_prev[7] !== 1'bx ) && ( recebido_prev[7] !== recebido_expected_prev[7] )
		&& ((recebido_expected_prev[7] !== last_recebido_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port recebido[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", recebido_expected_prev);
		$display ("     Real value = %b", recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_recebido_exp[7] = recebido_expected_prev[7];
	end
	if (
		( sai_expected_prev[0] !== 1'bx ) && ( sai_prev[0] !== sai_expected_prev[0] )
		&& ((sai_expected_prev[0] !== last_sai_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sai[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sai_expected_prev);
		$display ("     Real value = %b", sai_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sai_exp[0] = sai_expected_prev[0];
	end
	if (
		( sai_expected_prev[1] !== 1'bx ) && ( sai_prev[1] !== sai_expected_prev[1] )
		&& ((sai_expected_prev[1] !== last_sai_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sai[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sai_expected_prev);
		$display ("     Real value = %b", sai_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sai_exp[1] = sai_expected_prev[1];
	end
	if (
		( sai_expected_prev[2] !== 1'bx ) && ( sai_prev[2] !== sai_expected_prev[2] )
		&& ((sai_expected_prev[2] !== last_sai_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sai[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sai_expected_prev);
		$display ("     Real value = %b", sai_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sai_exp[2] = sai_expected_prev[2];
	end
	if (
		( sai_expected_prev[3] !== 1'bx ) && ( sai_prev[3] !== sai_expected_prev[3] )
		&& ((sai_expected_prev[3] !== last_sai_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sai[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sai_expected_prev);
		$display ("     Real value = %b", sai_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sai_exp[3] = sai_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module projeto3sd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkFPGA;
reg [7:0] enviar;
reg ESCREVER;
reg LER;
reg MOSI;
reg SCK;
reg SS;
// wires                                               
wire MISO;
wire ovf;
wire [7:0] recebido;
wire [3:0] sai;

wire sampler;                             

// assign statements (if any)                          
projeto3sd i1 (
// port map - connection between master ports and signals/registers   
	.clkFPGA(clkFPGA),
	.enviar(enviar),
	.ESCREVER(ESCREVER),
	.LER(LER),
	.MISO(MISO),
	.MOSI(MOSI),
	.ovf(ovf),
	.recebido(recebido),
	.sai(sai),
	.SCK(SCK),
	.SS(SS)
);
// enviar[ 7 ]
initial
begin
	enviar[7] = 1'b0;
	enviar[7] = #120000 1'b1;
	enviar[7] = #450000 1'b0;
end 
// enviar[ 6 ]
initial
begin
	enviar[6] = 1'b0;
	enviar[6] = #120000 1'b1;
	enviar[6] = #450000 1'b0;
end 
// enviar[ 5 ]
initial
begin
	enviar[5] = 1'b0;
end 
// enviar[ 4 ]
initial
begin
	enviar[4] = 1'b0;
end 
// enviar[ 3 ]
initial
begin
	enviar[3] = 1'b0;
	enviar[3] = #120000 1'b1;
	enviar[3] = #450000 1'b0;
end 
// enviar[ 2 ]
initial
begin
	enviar[2] = 1'b0;
	enviar[2] = #120000 1'b1;
	enviar[2] = #450000 1'b0;
end 
// enviar[ 1 ]
initial
begin
	enviar[1] = 1'b0;
end 
// enviar[ 0 ]
initial
begin
	enviar[0] = 1'b0;
	enviar[0] = #120000 1'b1;
	enviar[0] = #450000 1'b0;
end 

// LER
initial
begin
	LER = 1'b0;
	LER = #110000 1'b1;
	LER = #750000 1'b0;
end 

// MOSI
initial
begin
	MOSI = 1'b0;
	MOSI = #170000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #60000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #100000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #60000 1'b1;
	MOSI = #20000 1'b0;
	MOSI = #20000 1'b1;
	MOSI = #110000 1'b0;
end 

// SCK
always
begin
	SCK = 1'b0;
	SCK = #20000 1'b1;
	#20000;
end 

// SS
initial
begin
	SS = 1'b1;
	SS = #190000 1'b0;
	SS = #490000 1'b1;
	SS = #120000 1'b0;
end 

// ESCREVER
initial
begin
	ESCREVER = 1'b0;
	ESCREVER = #130000 1'b1;
	ESCREVER = #80000 1'b0;
	ESCREVER = #240000 1'b1;
	ESCREVER = #80000 1'b0;
end 

// clkFPGA
always
begin
	clkFPGA = 1'b0;
	clkFPGA = #5000 1'b1;
	#5000;
end 

projeto3sd_vlg_sample_tst tb_sample (
	.clkFPGA(clkFPGA),
	.enviar(enviar),
	.ESCREVER(ESCREVER),
	.LER(LER),
	.MOSI(MOSI),
	.SCK(SCK),
	.SS(SS),
	.sampler_tx(sampler)
);

projeto3sd_vlg_check_tst tb_out(
	.MISO(MISO),
	.ovf(ovf),
	.recebido(recebido),
	.sai(sai),
	.sampler_rx(sampler)
);
endmodule

